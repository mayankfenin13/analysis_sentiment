{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2157,"sourceType":"datasetVersion","datasetId":18}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')\n\nimport nltk","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-29T06:14:01.888502Z","iopub.execute_input":"2024-06-29T06:14:01.889514Z","iopub.status.idle":"2024-06-29T06:14:05.664534Z","shell.execute_reply.started":"2024-06-29T06:14:01.889474Z","shell.execute_reply":"2024-06-29T06:14:05.663236Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('../input/amazon-fine-food-reviews/Reviews.csv')\nprint(df.shape)\ndf = df.head(500)\nprint(df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:05.666639Z","iopub.execute_input":"2024-06-29T06:14:05.667120Z","iopub.status.idle":"2024-06-29T06:14:14.269425Z","shell.execute_reply.started":"2024-06-29T06:14:05.667088Z","shell.execute_reply":"2024-06-29T06:14:14.268180Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"(568454, 10)\n(500, 10)\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:14.270760Z","iopub.execute_input":"2024-06-29T06:14:14.271139Z","iopub.status.idle":"2024-06-29T06:14:14.297351Z","shell.execute_reply.started":"2024-06-29T06:14:14.271110Z","shell.execute_reply":"2024-06-29T06:14:14.296147Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   Id   ProductId          UserId                      ProfileName  \\\n0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n3   4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n4   5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n\n   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n0                     1                       1      5  1303862400   \n1                     0                       0      1  1346976000   \n2                     1                       1      4  1219017600   \n3                     3                       3      2  1307923200   \n4                     0                       0      5  1350777600   \n\n                 Summary                                               Text  \n0  Good Quality Dog Food  I have bought several of the Vitality canned d...  \n1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...  \n2  \"Delight\" says it all  This is a confection that has been around a fe...  \n3         Cough Medicine  If you are looking for the secret ingredient i...  \n4            Great taffy  Great taffy at a great price.  There was a wid...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>B001E4KFG0</td>\n      <td>A3SGXH7AUHU8GW</td>\n      <td>delmartian</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1303862400</td>\n      <td>Good Quality Dog Food</td>\n      <td>I have bought several of the Vitality canned d...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>B000LQOCH0</td>\n      <td>ABXLMWJIXXAIN</td>\n      <td>Natalia Corres \"Natalia Corres\"</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1219017600</td>\n      <td>\"Delight\" says it all</td>\n      <td>This is a confection that has been around a fe...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>B000UA0QIQ</td>\n      <td>A395BORC6FGVXV</td>\n      <td>Karl</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1307923200</td>\n      <td>Cough Medicine</td>\n      <td>If you are looking for the secret ingredient i...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>B006K2ZZ7K</td>\n      <td>A1UQRSCLF8GW1T</td>\n      <td>Michael D. Bigham \"M. Wassir\"</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>1350777600</td>\n      <td>Great taffy</td>\n      <td>Great taffy at a great price.  There was a wid...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"ax = df['Score'].value_counts().sort_index() \\\n    .plot(kind='bar',\n          title='Count of Reviews by Stars',\n          figsize=(10, 5))\nax.set_xlabel('Review Stars')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:14.298909Z","iopub.execute_input":"2024-06-29T06:14:14.299322Z","iopub.status.idle":"2024-06-29T06:14:14.616575Z","shell.execute_reply.started":"2024-06-29T06:14:14.299285Z","shell.execute_reply":"2024-06-29T06:14:14.615351Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAz8AAAHWCAYAAABZgTcgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABGvUlEQVR4nO3de1xVdb7/8fcGNvdkg6iAiKBGWipYpokeUXRymjym6dHCyjKtxks1/Zxu3k3HtJxTjXWOR7G0i+nY0bRM7eIl08pLeTc0MW9gkoApohtYvz96sI5bQNkJe4+s1/Px6DGs+2ctP2O8W9+1ls0wDEMAAAAAUMv5eLsAAAAAAPAEwg8AAAAASyD8AAAAALAEwg8AAAAASyD8AAAAALAEwg8AAAAASyD8AAAAALAEwg8AAAAASyD8AAAAALAEwg8AWNDq1auVkpIih8Mhm82m3r17e7sktx06dEg2m00PPvigt0u5arXpXADgXxnhB8A1b9++fRo5cqRatmypsLAw+fv7KyYmRnfeeacyMjJ0/vx5b5d4RW+99ZZsNpveeuutGj/WoUOHdNdddykrK0uDBw/W+PHjdc8991x2m7Vr18pms7n8Y7fbFRMTo7vvvlvr16+v8bpRc0pKSjR79mylpqYqIiJCdrtd9evXV+vWrTVkyBAtW7bMZX1P9isAVCc/bxcAAFdj0qRJmjhxokpLS9WhQwcNGjRIoaGhOnHihNauXashQ4bov/7rv7RlyxZvl/ov47PPPlNRUZFmzJih9PR0t7Zt3LixeXeisLBQW7du1ZIlS7R06VItXLhQ//Ef/1EDFVesYcOG2rt3r8LCwjx2zNqopKREPXv21MqVK+VwOHTnnXcqNjZWFy5c0O7du/Xee+9p37596tWrl7dLBYCrRvgBcM3629/+pvHjx6tRo0b65z//qfbt25db56OPPtKMGTO8UN2/ruPHj0uSYmJi3N42Pj5eEyZMcJn34osv6rnnntPTTz/t0fBjt9vVvHlzjx2vtlqwYIFWrlyppKQkrVu3rlyYLCws1DfffOOl6gCgejHsDcA16dChQ5owYYLsdrtWrFhRYfCRZP4X7UstWrRInTt3VlhYmIKCgtSqVStNnTq1wiFyNptNXbp0qXD/Dz74oGw2mw4dOuRSW9nzG4cOHdI999yjyMhIBQYGqm3btvroo49c9tGlSxc99NBDkqSHHnrIZWjZxfu9nKqcT9nQtfHjx0uSunbtah5n7dq1VTpORR5++GHzvHNzc8stX7Bggbp27SqHw6HAwEC1aNFCkydPdqnt2LFj8vX1VZs2bSo9zh133CGbzaZdu3aZx6vsOZnCwkJNnTpVycnJCgkJUWhoqDp06KAFCxa4rPfDDz/IZrNp4MCBLvOzsrLMa/Pll1+6LHvmmWdks9n0xRdfmPN27Nihe++9V/Hx8QoICFC9evV0880368knn5TT6az0nCqyb98+9e7dWxEREQoJCVGnTp20evVql3VmzZolm82miRMnVriPnJwc2e12tWrV6orH27hxo6Tfermiu2jBwcHq2rWrOV2Vfj1+/LgmTZqkjh07KioqyhyKmp6erj179pQ7xsV/lpmZmRowYIDq168vHx8fszcPHjyoRx55RM2aNVNQUJAiIiLUqlUrPfbYY/rll1+ueJ4AIHHnB8A16s0335TT6dQ999yjli1bXnbdgIAAl+nnn39eU6dOVWRkpNLT0xUaGqpPPvlEzz//vFatWqXVq1fL39//qmv86aef1K5dOzVp0kT333+/Tp06pYULF+quu+7SZ599Zv5C+eCDD8rhcOjDDz/UXXfdpeTkZHMfDofjisep6vnEx8dr/PjxWrt2rdatW6dBgwYpPj5eksz/vVp2u91levDgwXrzzTcVGxurvn37yuFw6Ouvv9bYsWP1+eef69NPP5Wfn58aNmyo7t27a/Xq1dq5c2e5X9qzs7P16aef6pZbbrnin3d+fr7S0tL03Xff6eabb9bgwYNVWlqqVatWKT09Xbt379bkyZMlSTfccIMaNmzoEmQk6fPPP3f5+d/+7d9cpgMDA5WSkiLpt+DTvn172Ww29erVSwkJCTp9+rQOHDigN954Q5MnTy53XSqTlZWlDh06qFWrVnr00UeVnZ2thQsX6o477tB7772nAQMGSJIGDhyop59+WhkZGRozZox8fX1d9jN37lwVFxfr0UcfveIx69atK0nKzMysUo1V6df169frxRdfVNeuXdW3b1+FhoZq//79Wrx4sZYtW6avvvpKSUlJ5fb9448/qn379kpMTNTAgQN17tw51alTR9nZ2br11lt1+vRp/elPf1Lfvn1VVFSkrKwsvf322xoxYoR5HgBwWQYAXIPS0tIMScbs2bPd2m7jxo2GJKNRo0ZGdna2Od/pdBo9e/Y0JBlTpkxx2UaSkZqaWuH+Bg0aZEgysrKyzHlZWVmGJEOSMWHCBJf1V65caUgy7rjjDpf5b775piHJePPNN2v8fMaPH29IMtasWVPl46xZs6bS6/DCCy8YkoyWLVu6zC87pz59+hiFhYUV1vDKK6+Y89577z1DkvH//t//K3eM6dOnG5KM1157zZxXdp0HDRrksm7Zn8m0adNc5p87d87o0aOHYbPZjO+++86cf//99xuSjF27dpnz7rnnHiMyMtJITk42OnXqZM4/deqU4ePjY6SlpZnznnrqKUOSsXTp0nJ1nzp1yigpKSk3/1IX98yoUaNclm3evNnw8/MzHA6HUVBQYM4fPny4IclYvny5y/qlpaVGQkKCERwcbOTn51/x2Nu2bTPsdrths9mM++67z/jggw+MQ4cOXXabK/XriRMnjNOnT5eb//333xshISHGH//4R5f5F5//c889V2671157rVy/lDlz5ky5/gKAyjDsDcA1KTs7W5IUGxvr1nZz586VJI0ZM0ZRUVHmfD8/P82YMUM+Pj6aM2dOtdTYuHFjjRkzxmVejx49FBcXp2+//bZajuHJ85H+b7jhhAkT9PTTTystLU1jx45VnTp1NGvWLJd1X331Vfn5+Wnu3LkKCgpyWTZ27FjVrVtX7777rjmvd+/eCgsL07vvvquSkhKX9efNmye73a577733svX98ssveuedd9S2bVs9/fTTLssCAwM1bdo0GYah9957z5zfrVs3Sa53e7744gulpaWpe/fu+uabb3T27FlJ0po1a1RaWmpuc7FLz1GSwsPD5eNT9X/VhoWFady4cS7z2rZtq4EDByo/P19Lliwx5//5z3+WpHLXffXq1crKytKAAQOq9DKINm3a6J133lGDBg30zjvvqG/fvoqPj1fdunXVp08fLV++vMr1l6lfv76uu+66cvOTkpKUlpamNWvWVDgcsEGDBuawzIpUdI1DQkIqnA8AFWHYGwBL2bZtmyQpLS2t3LLExETFxsYqKytLBQUFV/0WseTk5HLDkSSpUaNG2rRp01Xtu4wnz0f6bSjfpc+ZhIeH64svvnAZ/lRYWKjt27crMjJSr7zySoX7CggI0N69e83poKAg9e/fX7Nnz9aqVav0pz/9SZK0detW7d69W3369FFkZORl69u8ebNKSkpks9nKvZhBkvkL98XHLbt2n3/+uR5//HHt2rVLP//8s7p166ZGjRrp5Zdf1vr163XHHXeYw+Muvt4DBgzQq6++qt69e6tfv37q3r27OnbsqKZNm1621orcfPPNFYaGLl26aN68efruu+80aNAgSdJNN92kzp0765NPPtGRI0fUqFEjSdL//M//SJIee+yxKh+3f//+6tOnj9asWaMNGzbou+++04YNG7R06VItXbpUDzzwgPl666r6+OOP9d///d/asmWLcnNzVVxc7LI8NzdX0dHRLvOSkpLKDVOVpF69eun555/X8OHDtWrVKvXo0UMdO3bUjTfe6FZNAED4AXBNio6O1t69e3Xs2DG3tisoKDC3r2y/hw8fVn5+/lWHhcqe1/Hz81NpaelV7buMJ89HklJTU80H0E+dOqUPPvhAI0aM0L//+79r8+bN5t2nvLw8GYahkydPVvpQfkUefPBBzZ49W/PmzTPDz7x58yTJ/KX/csoefN+8ebM2b95c6Xpnzpwxf27UqJGuv/56rVu3TiUlJeYdoG7duikqKkp2u12ff/657rjjDn3++eeqU6eObr31VnP7du3a6csvv9SUKVO0ePFivf3225J+e55o/PjxV7xbdbEGDRpUOL/supb9eZcZNmyY1q9frzlz5mjixInKycnRsmXLlJycrHbt2lX5uNJvz2vdfvvtuv322yX99grsDz74QIMHD9b8+fPVp0+fKn8M99VXX9WTTz6p8PBw/eEPf1BcXJyCg4Nls9m0dOlSbd++vcKXi1x89/JijRs31rfffqsJEyZo5cqV+t///V9Jv/3ZjRo1So8//rhb5wrAuhj2BuCa1KlTJ0muQ5WqoiwA5OTkVLi8bDjdxUHBZrOV+6/WZfLz8906fnX7PedTXSIiIjR06FD9/e9/19GjRzVs2LBydbVp00aGYVz2n4ulpKTo+uuv17Jly5Sfny+n06kFCxYoMjLSDEOXU3bcv/zlL5c95po1a1y2S0tLU0FBgTZv3qzPP/9cjRs3VtOmTRUSEqJ27drps88+0/Hjx7Vv3z517ty53B29Dh066KOPPlJeXp6++uorjR07VidOnFB6ero+++yzKl/TEydOVDi/7M/30j/Hu+++Ww0aNFBGRoZKSkrcetHBlfj6+qp///76y1/+IknlXgpRmeLiYk2YMEFRUVHavXu3Fi5cqJdeekkTJ07UhAkTKg14ki57F6dFixZauHChfvnlF23ZskUvvviiSktL9cQTTygjI8O9kwNgWYQfANekhx56SHa7XR988EGFr8692MX/hbnsVcoVvdr5wIEDOnr0qBISElzu2oSHh+vIkSPl1i8pKdH333//u+q/VNkv05c+63Ilv+d8qttjjz2mm266SUuWLNFXX30lSQoNDdVNN92k3bt369SpU27tb9CgQSoqKtLChQv18ccfKzc3V+np6VV6Y1q7du3k4+NT7vXUV1L2DM+qVau0fv16l2d6unXrph07dmjhwoUu61YkICBAKSkpmjRpkl577TVJ0ocffljlOrZt26Zff/213PyyP99LXwVut9s1ZMgQHTt2TMuXL9ecOXMUGhpa7tXdV6NsGN7FQfVy/Zqbm6v8/HylpKSUuyN55swZc6jm7+Xn56dbbrlFzzzzjPnq8qVLl17VPgFYB+EHwDWp7GObFy5c0J133qktW7ZUuN7KlSt1xx13mNODBw+WJE2ePFknT54055eUlGjUqFEqLS01v1tTpl27djp8+HC5b61MnjxZP/30U7WcT9lreg8fPuzWdr/nfKqbr6+vObRt9OjR5vynnnpKFy5c0ODBgyu8Q5aXl1fhL8IPPPCAfHx8NH/+fM2fP1+SKvyWT0Xq16+vgQMHasuWLXrhhRcq/OX8xx9/VFZWlsu8sm8evfHGGyooKHAJOGlpaTIMQy+++KI5fbGNGzfq3Llz5Y5TdhcnODi4SrVLvw1rmzRpksu8LVu26N1331VYWJj69OlTbptHHnlEvr6+GjFihLKyspSenl7hc0OVWbBggT799NMKh2Lm5ORo9uzZkqTOnTub8y/Xr/Xr11dwcLC2bt3qMrzQ6XTqiSeeqPBbUFeydevWckP+pN93jQFYG8/8ALhmPf/88youLtbEiRN16623KiUlRW3btlVoaKhOnDih9evXa//+/Wrbtq25TUpKip5++mlNnz5dLVu2VL9+/RQSEqJPPvlEu3btUqdOnfTXv/7V5TijRo3SqlWrdNddd2nAgAGKiIjQxo0blZWVpS5dulzVB0LLdOjQQcHBwXrllVf0yy+/mM8+jBw58rJD1n7P+dSEu+++W8nJyVq3bp35QPrgwYO1detWvfHGG2ratKn5prtTp04pKytL69ev10MPPaT//u//dtlXo0aN1LVrV33++efy8/NT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qxUYGKgRI0boq6++0gsvvKDS0lJvl4RaatKkSfL19dW5c+d0/PhxxcXFmctOnjzJCw+qGeGnlurVq5fOnz9f6fKoqCiNHz/egxWhtmrXrp2++uorde7cudyyhx9+WIZh6NNPP/VCZaht/vCHP7j8AnrxLwiS9N133/G8D6pdx44d1bx5cx08eJDnGFHt+vXr5zJ96Qs1tm7dqubNm3uypFrPZvDVLgAAAAAWwEdOAQAAAFgC4QcAAACAJRB+AAAAAFgC4QcA4BFr165V//799fPPP3u7FACARfG2NwCwkLVr1+qNN94wp318fBQWFqbWrVvr3nvvVUREhBer85wtW7Zo+fLlOnbsmIqKiuRwONSkSROlpaUpOTlZknTq1Cl99tlnateuneLj471aLwCgehB+AMCC+vfvr/r168vpdGr//v1au3at9u3bpxkzZsjf379Gjtm5c2elpKTIbrfXyP6ratmyZXrnnXd04403qnfv3goICFBOTo527typr776ygw/eXl5Wrx4serXr0/4AYBagvADABbUpk0bNW3aVJLUrVs3XXfddfrwww+1ZcsWpaSk1MgxfXx8aixYVVVJSYk++OADtW7dWmPGjCm3vKCgoMZrKCoqKvctDwCAZ/DMDwBALVq0kCSdOHHCZf6xY8c0Y8YMPfTQQxo4cKCeffZZbdmyxVz+448/qn///lq7dm25fX7//ffq37+/tm7dKqnyZ36+++47jRs3Tvfff78eeOABTZ06VUeOHDGXb9myRf3799dPP/1kzvv666/Vv39/vfzyyy77+stf/qL//M//rPQ8f/31V507d0433HBDhcvDwsIkSbt379Zzzz0nSXrjjTfUv39/l/Pcu3ev/v73v+vPf/6z0tPT9ec//1lvvfWWLly44LK/119/Xffff79ycnI0depUPfDAA3rttdckSdnZ2Xr55Zc1dOhQDRw4UI899pheeeUVFRYWVlo/AODqEH4AAGYgCQkJMecdOXJEo0eP1rFjx9S7d2/df//9CggI0EsvvaRvv/1WktS0aVM1aNBAmzZtKrfPjRs3KiQkRElJSZUed/369XrxxRcVGBiogQMHqm/fvjp69KjGjRtn1tS8eXPZbDbt3bvX3G7fvn2y2Wzat2+fOe/06dM6duyYGeQqUqdOHfn7+2vr1q06c+ZMpes1bNhQ/fv3lyR1795dI0aM0IgRI8x9b9q0SefPn9ftt9+uwYMHKykpSStXrtTMmTPL7au0tFRTpkxRnTp1dP/99+u2225TcXGxpkyZov379+uOO+7Qww8/rO7du+vEiRM6e/ZspXUBAK4Ow94AwIIKCwt1+vRp85mfxYsXy26365ZbbjHXeeuttxQZGampU6eaz+n06NFD48aN07vvvqt27dpJkjp06KDly5frzJkzCg0NlSQVFxdr8+bNateunfz8Kv5XTVFRkd58802lpaXp0UcfNeenpqbqySef1JIlS/Too48qNDRUsbGx2rt3r/74xz9K+u3OS/v27fX111/r2LFjatiwoRmELhd+fHx81KtXLy1evFh//vOfdeONN+qGG25QcnKymjRpYq7ncDjUpk0bLVq0SImJiercubPLfu677z6XIXzdu3dXVFSUFixYoNzcXEVGRprLnE6nOnTooPT0dHPeoUOH9PPPP+upp57SbbfdZs7v169fpbUDAK4e4QcALOiFF15wma5Xr55GjhypunXrSpLOnDmjXbt2qX///jp37pzOnTtnrpuUlKRFixbp1KlTioiIUEpKipYuXapvv/1WaWlpkqTt27fr7Nmzl31+aMeOHTp79qw6duyo06dPm/N9fHx0/fXXa/fu3ea85s2bm8Ptzp07p59++kkDBw7U7t27tXfvXjVs2FB79+5VSEiIGjVqdNlz79+/v2JiYrR69Wp9//33+u677/T+++8rISFBI0eOVGxs7BWv38XBp6ioSBcuXFBiYqIMw1BWVpZL+JGk22+/3WU6ODhY0m9DA9u0aaOAgIArHhMAcPUIPwBgQQ8//LCio6NVWFioNWvWaO/evS5vYcvJyZFhGFq4cKEWLlxY4T4KCgoUERGh+Ph4NWzYUBs3bjTDz8aNG3XdddepZcuWldaQnZ0tSZo0aVKFy4OCgsyfW7RooU8//VQ5OTnKycmRzWZTYmKiWrRooX379ql79+7at2+fbrjhBvn4XHlEd6dOndSpUycVFhbqwIEDWrt2rTZs2KBp06ZV6Y13ubm5WrhwobZs2VJumNqlz+z4+vqWe4V4/fr11bNnT3300UfasGGDWrRooVtuuUWdO3c2gxEAoPoRfgDAgpo1a2a+7a1du3YaO3asXn31Vb366qsKDAxUaWmpJOnf//3fK31mJyoqyvy5Q4cOWrJkiU6fPq2goCBt2bJFHTt2lK+vb6U1GIYhSRoxYoQcDke55Rdv27x5c0nSnj179PPPPyshIUGBgYFq3ry5PvnkExUVFSkrK0v33HOPW9chODhYrVu3VuvWreXr66t169bpwIEDuvHGGyvdprS0VC+88ILOnDmju+66Sw0bNlRAQIBOnTqlN954wzyvMn5+fhUGsgceeEBdunTR5s2btWPHDr355ptaunSppkyZYt6BAwBUL8IPAFicj4+P0tPTNXHiRK1cuVK9e/dWgwYNJP0WQFq3bn3FfaSkpGjx4sX65ptvFBYWpnPnzqljx46X3absGGUfWb2cyMhIRUZGat++fTpx4oQZhm688UbNnz9fmzZtUmlp6WVDy5U0bdpU69atU15eniTJZrNVuN7hw4eVnZ2t4cOHKzU11Zy/Y8cOt48ZFxenuLg49e3bVz/88IPGjh2rTz/91O0QBwCoGt72BgDQTTfdpGbNmunjjz/WhQsXFBYWpptuukmfffaZGQYudvEzOpIUGxuruLg4bdy4URs3blR4ePhlXzwg/fbsUFBQkJYsWaLi4uIrHqN58+batWuXDhw4YO47Pj5eQUFBWrp0qfz9/V1eWlCR8+fPKzMzs8Jl3333nSQpJiZGkszncC4d1lZ2F+fiOzyGYWjFihWXPfbFCgsLVVJS4jIvLi5ONptNTqezyvsBALiHOz8AAElSr1699Pe//11r167V7bffrocfflhjx47VqFGj1K1bN9WvX18FBQXKzMzUqVOn9NJLL7lsn5KSooULF8rf319du3a94rM3wcHBGjp0qP7xj3/omWeeUceOHVWnTh3l5uZq27ZtuuGGG/Twww+b67do0UIbNmyQzWYz7/z4+PgoMTFR27dv10033VTpm+XKnD9/XmPGjNH111+v5ORk1a1bV4WFhdq8ebP27t2rW2+9VQkJCZJ+uzMVEhKiTz/9VEFBQQoICND111+vmJgYNWjQQG+//bZOnTql4OBgffPNN5d9dfaldu3apblz5+q2225TTEyMSkpKtH79evn4+Kh9+/ZV3g8AwD2EHwCApN+e/WnQoIGWL1+u7t27KzY2Vi+++KL++c9/au3atfr1118VFham+Ph49e3bt9z2KSkpev/993X+/PnLvuXtYp06dVJ4eLiWLl2qZcuWyel0KiIiQi1atFDXrl1d1i272xMTE6PrrrvOZf727dvNQHQ5ISEhevTRR7Vt2zatXbtW+fn58vHxUUxMjO677z796U9/Mtf18/PT8OHD9d5772n27NkqKSnRsGHD1KVLFz3zzDPmMzp2u13t2rXTH//4R/31r3+t0nnHx8crKSlJW7du1aeffqqAgAA1btxYzz//vBITE6u0DwCA+2zGpU9mAgAAAEAtxDM/AAAAACyB8AMAAADAEgg/AAAAACyB8AMAAADAEgg/AAAAACyB8AMAAADAEgg/AAAAACyB8AMAAADAEgg/AAAAACyB8AMAAADAEgg/AAAAACyB8AMAAADAEgg/AAAAACzh/wM+d62+bCo1UAAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"example = df['Text'][50]\nprint(example)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:14.620044Z","iopub.execute_input":"2024-06-29T06:14:14.620477Z","iopub.status.idle":"2024-06-29T06:14:14.626809Z","shell.execute_reply.started":"2024-06-29T06:14:14.620440Z","shell.execute_reply":"2024-06-29T06:14:14.625580Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"This oatmeal is not good. Its mushy, soft, I don't like it. Quaker Oats is the way to go.\n","output_type":"stream"}]},{"cell_type":"code","source":"from nltk.sentiment import SentimentIntensityAnalyzer\nfrom tqdm.notebook import tqdm\n\nsia = SentimentIntensityAnalyzer()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:14.628757Z","iopub.execute_input":"2024-06-29T06:14:14.629167Z","iopub.status.idle":"2024-06-29T06:14:14.673914Z","shell.execute_reply.started":"2024-06-29T06:14:14.629130Z","shell.execute_reply":"2024-06-29T06:14:14.672608Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/nltk/twitter/__init__.py:20: UserWarning: The twython library has not been installed. Some functionality from the twitter package will not be available.\n  warnings.warn(\"The twython library has not been installed. \"\n","output_type":"stream"}]},{"cell_type":"code","source":"res = {}\nfor i, row in tqdm(df.iterrows(), total=len(df)):\n    text = row['Text']\n    myid = row['Id']\n    res[myid] = sia.polarity_scores(text)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:14.675541Z","iopub.execute_input":"2024-06-29T06:14:14.676157Z","iopub.status.idle":"2024-06-29T06:14:15.253630Z","shell.execute_reply.started":"2024-06-29T06:14:14.676116Z","shell.execute_reply":"2024-06-29T06:14:15.252425Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/500 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ce447cd338e24c4f93800963e6da61ec"}},"metadata":{}}]},{"cell_type":"code","source":"vaders = pd.DataFrame(res).T\nvaders = vaders.reset_index().rename(columns={'index': 'Id'})\nvaders = vaders.merge(df, how='left')","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:15.255008Z","iopub.execute_input":"2024-06-29T06:14:15.255381Z","iopub.status.idle":"2024-06-29T06:14:15.283793Z","shell.execute_reply.started":"2024-06-29T06:14:15.255350Z","shell.execute_reply":"2024-06-29T06:14:15.282633Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"vaders.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:15.285178Z","iopub.execute_input":"2024-06-29T06:14:15.285588Z","iopub.status.idle":"2024-06-29T06:14:15.306369Z","shell.execute_reply.started":"2024-06-29T06:14:15.285551Z","shell.execute_reply":"2024-06-29T06:14:15.305170Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   Id    neg    neu    pos  compound   ProductId          UserId  \\\n0   1  0.000  0.695  0.305    0.9441  B001E4KFG0  A3SGXH7AUHU8GW   \n1   2  0.079  0.853  0.068   -0.1027  B00813GRG4  A1D87F6ZCVE5NK   \n2   3  0.091  0.754  0.155    0.8265  B000LQOCH0   ABXLMWJIXXAIN   \n3   4  0.000  1.000  0.000    0.0000  B000UA0QIQ  A395BORC6FGVXV   \n4   5  0.000  0.552  0.448    0.9468  B006K2ZZ7K  A1UQRSCLF8GW1T   \n\n                       ProfileName  HelpfulnessNumerator  \\\n0                       delmartian                     1   \n1                           dll pa                     0   \n2  Natalia Corres \"Natalia Corres\"                     1   \n3                             Karl                     3   \n4    Michael D. Bigham \"M. Wassir\"                     0   \n\n   HelpfulnessDenominator  Score        Time                Summary  \\\n0                       1      5  1303862400  Good Quality Dog Food   \n1                       0      1  1346976000      Not as Advertised   \n2                       1      4  1219017600  \"Delight\" says it all   \n3                       3      2  1307923200         Cough Medicine   \n4                       0      5  1350777600            Great taffy   \n\n                                                Text  \n0  I have bought several of the Vitality canned d...  \n1  Product arrived labeled as Jumbo Salted Peanut...  \n2  This is a confection that has been around a fe...  \n3  If you are looking for the secret ingredient i...  \n4  Great taffy at a great price.  There was a wid...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>neg</th>\n      <th>neu</th>\n      <th>pos</th>\n      <th>compound</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.000</td>\n      <td>0.695</td>\n      <td>0.305</td>\n      <td>0.9441</td>\n      <td>B001E4KFG0</td>\n      <td>A3SGXH7AUHU8GW</td>\n      <td>delmartian</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1303862400</td>\n      <td>Good Quality Dog Food</td>\n      <td>I have bought several of the Vitality canned d...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.079</td>\n      <td>0.853</td>\n      <td>0.068</td>\n      <td>-0.1027</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.091</td>\n      <td>0.754</td>\n      <td>0.155</td>\n      <td>0.8265</td>\n      <td>B000LQOCH0</td>\n      <td>ABXLMWJIXXAIN</td>\n      <td>Natalia Corres \"Natalia Corres\"</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1219017600</td>\n      <td>\"Delight\" says it all</td>\n      <td>This is a confection that has been around a fe...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0.000</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.0000</td>\n      <td>B000UA0QIQ</td>\n      <td>A395BORC6FGVXV</td>\n      <td>Karl</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1307923200</td>\n      <td>Cough Medicine</td>\n      <td>If you are looking for the secret ingredient i...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.000</td>\n      <td>0.552</td>\n      <td>0.448</td>\n      <td>0.9468</td>\n      <td>B006K2ZZ7K</td>\n      <td>A1UQRSCLF8GW1T</td>\n      <td>Michael D. Bigham \"M. Wassir\"</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>1350777600</td>\n      <td>Great taffy</td>\n      <td>Great taffy at a great price.  There was a wid...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"ax = sns.barplot(data=vaders, x='Score', y='compound')\nax.set_title('Compund Score by Amazon Star Review')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:15.307895Z","iopub.execute_input":"2024-06-29T06:14:15.308350Z","iopub.status.idle":"2024-06-29T06:14:15.667645Z","shell.execute_reply.started":"2024-06-29T06:14:15.308313Z","shell.execute_reply":"2024-06-29T06:14:15.666458Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"fig, axs = plt.subplots(1, 3, figsize=(12, 3))\nsns.barplot(data=vaders, x='Score', y='pos', ax=axs[0])\nsns.barplot(data=vaders, x='Score', y='neu', ax=axs[1])\nsns.barplot(data=vaders, x='Score', y='neg', ax=axs[2])\naxs[0].set_title('Positive')\naxs[1].set_title('Neutral')\naxs[2].set_title('Negative')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:15.668910Z","iopub.execute_input":"2024-06-29T06:14:15.669271Z","iopub.status.idle":"2024-06-29T06:14:16.657731Z","shell.execute_reply.started":"2024-06-29T06:14:15.669241Z","shell.execute_reply":"2024-06-29T06:14:16.656463Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x300 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from transformers import AutoTokenizer\nfrom transformers import AutoModelForSequenceClassification\nfrom scipy.special import softmax","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:16.659211Z","iopub.execute_input":"2024-06-29T06:14:16.659584Z","iopub.status.idle":"2024-06-29T06:14:21.207693Z","shell.execute_reply.started":"2024-06-29T06:14:16.659548Z","shell.execute_reply":"2024-06-29T06:14:21.206584Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"MODEL = f\"cardiffnlp/twitter-roberta-base-sentiment\"\ntokenizer = AutoTokenizer.from_pretrained(MODEL)\nmodel = AutoModelForSequenceClassification.from_pretrained(MODEL)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:14:21.209092Z","iopub.execute_input":"2024-06-29T06:14:21.209677Z","iopub.status.idle":"2024-06-29T06:15:03.152679Z","shell.execute_reply.started":"2024-06-29T06:14:21.209643Z","shell.execute_reply":"2024-06-29T06:15:03.149773Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mgaierror\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connection.py:203\u001b[0m, in \u001b[0;36mHTTPConnection._new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 203\u001b[0m     sock \u001b[38;5;241m=\u001b[39m \u001b[43mconnection\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcreate_connection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    204\u001b[0m \u001b[43m        \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dns_host\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mport\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    205\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    206\u001b[0m \u001b[43m        \u001b[49m\u001b[43msource_address\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msource_address\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    207\u001b[0m \u001b[43m        \u001b[49m\u001b[43msocket_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msocket_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    208\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    209\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m socket\u001b[38;5;241m.\u001b[39mgaierror \u001b[38;5;28;01mas\u001b[39;00m e:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/util/connection.py:60\u001b[0m, in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address, socket_options)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m LocationParseError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhost\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, label empty or too long\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m---> 60\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m res \u001b[38;5;129;01min\u001b[39;00m \u001b[43msocket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetaddrinfo\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfamily\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msocket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mSOCK_STREAM\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m     61\u001b[0m     af, socktype, proto, canonname, sa \u001b[38;5;241m=\u001b[39m res\n","File \u001b[0;32m/opt/conda/lib/python3.10/socket.py:955\u001b[0m, in \u001b[0;36mgetaddrinfo\u001b[0;34m(host, port, family, type, proto, flags)\u001b[0m\n\u001b[1;32m    954\u001b[0m addrlist \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m--> 955\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m res \u001b[38;5;129;01min\u001b[39;00m \u001b[43m_socket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetaddrinfo\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfamily\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mtype\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mproto\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m    956\u001b[0m     af, socktype, proto, canonname, sa \u001b[38;5;241m=\u001b[39m res\n","\u001b[0;31mgaierror\u001b[0m: [Errno -3] Temporary failure in name resolution","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mNameResolutionError\u001b[0m                       Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:790\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    789\u001b[0m \u001b[38;5;66;03m# Make the request on the HTTPConnection object\u001b[39;00m\n\u001b[0;32m--> 790\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    791\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    792\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    793\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    794\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    795\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    796\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    797\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    798\u001b[0m \u001b[43m    \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mretries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    799\u001b[0m \u001b[43m    \u001b[49m\u001b[43mresponse_conn\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresponse_conn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    800\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpreload_content\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    801\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdecode_content\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    802\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mresponse_kw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    803\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    805\u001b[0m \u001b[38;5;66;03m# Everything went great!\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:491\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[0;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\u001b[0m\n\u001b[1;32m    490\u001b[0m         new_e \u001b[38;5;241m=\u001b[39m _wrap_proxy_error(new_e, conn\u001b[38;5;241m.\u001b[39mproxy\u001b[38;5;241m.\u001b[39mscheme)\n\u001b[0;32m--> 491\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m new_e\n\u001b[1;32m    493\u001b[0m \u001b[38;5;66;03m# conn.request() calls http.client.*.request, not the method in\u001b[39;00m\n\u001b[1;32m    494\u001b[0m \u001b[38;5;66;03m# urllib3.request. It also calls makefile (recv) on the socket.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:467\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[0;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\u001b[0m\n\u001b[1;32m    466\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 467\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_conn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconn\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    468\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (SocketTimeout, BaseSSLError) \u001b[38;5;28;01mas\u001b[39;00m e:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:1096\u001b[0m, in \u001b[0;36mHTTPSConnectionPool._validate_conn\u001b[0;34m(self, conn)\u001b[0m\n\u001b[1;32m   1095\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m conn\u001b[38;5;241m.\u001b[39mis_closed:\n\u001b[0;32m-> 1096\u001b[0m     \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1098\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m conn\u001b[38;5;241m.\u001b[39mis_verified:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connection.py:611\u001b[0m, in \u001b[0;36mHTTPSConnection.connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    610\u001b[0m sock: socket\u001b[38;5;241m.\u001b[39msocket \u001b[38;5;241m|\u001b[39m ssl\u001b[38;5;241m.\u001b[39mSSLSocket\n\u001b[0;32m--> 611\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msock \u001b[38;5;241m=\u001b[39m sock \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_new_conn\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    612\u001b[0m server_hostname: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhost\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connection.py:210\u001b[0m, in \u001b[0;36mHTTPConnection._new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    209\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m socket\u001b[38;5;241m.\u001b[39mgaierror \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m--> 210\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m NameResolutionError(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhost, \u001b[38;5;28mself\u001b[39m, e) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n\u001b[1;32m    211\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m SocketTimeout \u001b[38;5;28;01mas\u001b[39;00m e:\n","\u001b[0;31mNameResolutionError\u001b[0m: <urllib3.connection.HTTPSConnection object at 0x7cb53539f5e0>: Failed to resolve 'huggingface.co' ([Errno -3] Temporary failure in name resolution)","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mMaxRetryError\u001b[0m                             Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/adapters.py:667\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    666\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 667\u001b[0m     resp \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43murlopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    668\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    669\u001b[0m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    670\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    671\u001b[0m \u001b[43m        \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    672\u001b[0m \u001b[43m        \u001b[49m\u001b[43mredirect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    673\u001b[0m \u001b[43m        \u001b[49m\u001b[43massert_same_host\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    674\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    675\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    676\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_retries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    677\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    678\u001b[0m \u001b[43m        \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    679\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    681\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (ProtocolError, \u001b[38;5;167;01mOSError\u001b[39;00m) \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:844\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    842\u001b[0m     new_e \u001b[38;5;241m=\u001b[39m ProtocolError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConnection aborted.\u001b[39m\u001b[38;5;124m\"\u001b[39m, new_e)\n\u001b[0;32m--> 844\u001b[0m retries \u001b[38;5;241m=\u001b[39m \u001b[43mretries\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mincrement\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    845\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnew_e\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_pool\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_stacktrace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msys\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexc_info\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m    846\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    847\u001b[0m retries\u001b[38;5;241m.\u001b[39msleep()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/util/retry.py:515\u001b[0m, in \u001b[0;36mRetry.increment\u001b[0;34m(self, method, url, response, error, _pool, _stacktrace)\u001b[0m\n\u001b[1;32m    514\u001b[0m     reason \u001b[38;5;241m=\u001b[39m error \u001b[38;5;129;01mor\u001b[39;00m ResponseError(cause)\n\u001b[0;32m--> 515\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m MaxRetryError(_pool, url, reason) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mreason\u001b[39;00m  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[1;32m    517\u001b[0m log\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIncremented Retry for (url=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m): \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, url, new_retry)\n","\u001b[0;31mMaxRetryError\u001b[0m: HTTPSConnectionPool(host='huggingface.co', port=443): Max retries exceeded with url: /cardiffnlp/twitter-roberta-base-sentiment/resolve/main/config.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7cb53539f5e0>: Failed to resolve 'huggingface.co' ([Errno -3] Temporary failure in name resolution)\"))","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mConnectionError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1722\u001b[0m, in \u001b[0;36m_get_metadata_or_catch_error\u001b[0;34m(repo_id, filename, repo_type, revision, endpoint, proxies, etag_timeout, headers, local_files_only, relative_filename, storage_folder)\u001b[0m\n\u001b[1;32m   1721\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1722\u001b[0m     metadata \u001b[38;5;241m=\u001b[39m \u001b[43mget_hf_file_metadata\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43metag_timeout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1723\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m EntryNotFoundError \u001b[38;5;28;01mas\u001b[39;00m http_error:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py:114\u001b[0m, in \u001b[0;36mvalidate_hf_hub_args.<locals>._inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m     kwargs \u001b[38;5;241m=\u001b[39m smoothly_deprecate_use_auth_token(fn_name\u001b[38;5;241m=\u001b[39mfn\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m, has_token\u001b[38;5;241m=\u001b[39mhas_token, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[0;32m--> 114\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1645\u001b[0m, in \u001b[0;36mget_hf_file_metadata\u001b[0;34m(url, token, proxies, timeout, library_name, library_version, user_agent, headers)\u001b[0m\n\u001b[1;32m   1644\u001b[0m \u001b[38;5;66;03m# Retrieve metadata\u001b[39;00m\n\u001b[0;32m-> 1645\u001b[0m r \u001b[38;5;241m=\u001b[39m \u001b[43m_request_wrapper\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1646\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mHEAD\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1647\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1648\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1649\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_redirects\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1650\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfollow_relative_redirects\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1651\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1652\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1653\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1654\u001b[0m hf_raise_for_status(r)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:372\u001b[0m, in \u001b[0;36m_request_wrapper\u001b[0;34m(method, url, follow_relative_redirects, **params)\u001b[0m\n\u001b[1;32m    371\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m follow_relative_redirects:\n\u001b[0;32m--> 372\u001b[0m     response \u001b[38;5;241m=\u001b[39m \u001b[43m_request_wrapper\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    373\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    374\u001b[0m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    375\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfollow_relative_redirects\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    376\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    377\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    379\u001b[0m     \u001b[38;5;66;03m# If redirection, we redirect only relative paths.\u001b[39;00m\n\u001b[1;32m    380\u001b[0m     \u001b[38;5;66;03m# This is useful in case of a renamed repository.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:395\u001b[0m, in \u001b[0;36m_request_wrapper\u001b[0;34m(method, url, follow_relative_redirects, **params)\u001b[0m\n\u001b[1;32m    394\u001b[0m \u001b[38;5;66;03m# Perform request and return if status_code is not in the retry list.\u001b[39;00m\n\u001b[0;32m--> 395\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[43mget_session\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mparams\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    396\u001b[0m hf_raise_for_status(response)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/sessions.py:589\u001b[0m, in \u001b[0;36mSession.request\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    588\u001b[0m send_kwargs\u001b[38;5;241m.\u001b[39mupdate(settings)\n\u001b[0;32m--> 589\u001b[0m resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mprep\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43msend_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    591\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m resp\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/sessions.py:703\u001b[0m, in \u001b[0;36mSession.send\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    702\u001b[0m \u001b[38;5;66;03m# Send the request\u001b[39;00m\n\u001b[0;32m--> 703\u001b[0m r \u001b[38;5;241m=\u001b[39m \u001b[43madapter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrequest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    705\u001b[0m \u001b[38;5;66;03m# Total elapsed time of the request (approximately)\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_http.py:66\u001b[0m, in \u001b[0;36mUniqueRequestIdAdapter.send\u001b[0;34m(self, request, *args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 66\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrequest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     67\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m requests\u001b[38;5;241m.\u001b[39mRequestException \u001b[38;5;28;01mas\u001b[39;00m e:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/adapters.py:700\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    698\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m SSLError(e, request\u001b[38;5;241m=\u001b[39mrequest)\n\u001b[0;32m--> 700\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mConnectionError\u001b[39;00m(e, request\u001b[38;5;241m=\u001b[39mrequest)\n\u001b[1;32m    702\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m ClosedPoolError \u001b[38;5;28;01mas\u001b[39;00m e:\n","\u001b[0;31mConnectionError\u001b[0m: (MaxRetryError('HTTPSConnectionPool(host=\\'huggingface.co\\', port=443): Max retries exceeded with url: /cardiffnlp/twitter-roberta-base-sentiment/resolve/main/config.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7cb53539f5e0>: Failed to resolve \\'huggingface.co\\' ([Errno -3] Temporary failure in name resolution)\"))'), '(Request ID: 12e3ca9b-fff7-4ec2-98d3-be3129ff720f)')","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mLocalEntryNotFoundError\u001b[0m                   Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/utils/hub.py:399\u001b[0m, in \u001b[0;36mcached_file\u001b[0;34m(path_or_repo_id, filename, cache_dir, force_download, resume_download, proxies, token, revision, local_files_only, subfolder, repo_type, user_agent, _raise_exceptions_for_gated_repo, _raise_exceptions_for_missing_entries, _raise_exceptions_for_connection_errors, _commit_hash, **deprecated_kwargs)\u001b[0m\n\u001b[1;32m    397\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    398\u001b[0m     \u001b[38;5;66;03m# Load from URL or cache if already cached\u001b[39;00m\n\u001b[0;32m--> 399\u001b[0m     resolved_file \u001b[38;5;241m=\u001b[39m \u001b[43mhf_hub_download\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    400\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpath_or_repo_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    401\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    402\u001b[0m \u001b[43m        \u001b[49m\u001b[43msubfolder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msubfolder\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43msubfolder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    403\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrepo_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrepo_type\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    404\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrevision\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrevision\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    405\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcache_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcache_dir\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    406\u001b[0m \u001b[43m        \u001b[49m\u001b[43muser_agent\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muser_agent\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    407\u001b[0m \u001b[43m        \u001b[49m\u001b[43mforce_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    408\u001b[0m \u001b[43m        \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    409\u001b[0m \u001b[43m        \u001b[49m\u001b[43mresume_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresume_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    410\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtoken\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtoken\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    411\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlocal_files_only\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlocal_files_only\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    412\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    413\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m GatedRepoError \u001b[38;5;28;01mas\u001b[39;00m e:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py:114\u001b[0m, in \u001b[0;36mvalidate_hf_hub_args.<locals>._inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m     kwargs \u001b[38;5;241m=\u001b[39m smoothly_deprecate_use_auth_token(fn_name\u001b[38;5;241m=\u001b[39mfn\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m, has_token\u001b[38;5;241m=\u001b[39mhas_token, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[0;32m--> 114\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1221\u001b[0m, in \u001b[0;36mhf_hub_download\u001b[0;34m(repo_id, filename, subfolder, repo_type, revision, library_name, library_version, cache_dir, local_dir, user_agent, force_download, proxies, etag_timeout, token, local_files_only, headers, endpoint, legacy_cache_layout, resume_download, force_filename, local_dir_use_symlinks)\u001b[0m\n\u001b[1;32m   1220\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1221\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_hf_hub_download_to_cache_dir\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1222\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# Destination\u001b[39;49;00m\n\u001b[1;32m   1223\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcache_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcache_dir\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1224\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# File info\u001b[39;49;00m\n\u001b[1;32m   1225\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrepo_id\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrepo_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1226\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfilename\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1227\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrepo_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrepo_type\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1228\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrevision\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrevision\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1229\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# HTTP info\u001b[39;49;00m\n\u001b[1;32m   1230\u001b[0m \u001b[43m        \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1231\u001b[0m \u001b[43m        \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1232\u001b[0m \u001b[43m        \u001b[49m\u001b[43metag_timeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43metag_timeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1233\u001b[0m \u001b[43m        \u001b[49m\u001b[43mendpoint\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mendpoint\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1234\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# Additional options\u001b[39;49;00m\n\u001b[1;32m   1235\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlocal_files_only\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlocal_files_only\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1236\u001b[0m \u001b[43m        \u001b[49m\u001b[43mforce_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1237\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1325\u001b[0m, in \u001b[0;36m_hf_hub_download_to_cache_dir\u001b[0;34m(cache_dir, repo_id, filename, repo_type, revision, headers, proxies, etag_timeout, endpoint, local_files_only, force_download)\u001b[0m\n\u001b[1;32m   1324\u001b[0m     \u001b[38;5;66;03m# Otherwise, raise appropriate error\u001b[39;00m\n\u001b[0;32m-> 1325\u001b[0m     \u001b[43m_raise_on_head_call_error\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhead_call_error\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mforce_download\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlocal_files_only\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1327\u001b[0m \u001b[38;5;66;03m# From now on, etag, commit_hash, url and size are not None.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1826\u001b[0m, in \u001b[0;36m_raise_on_head_call_error\u001b[0;34m(head_call_error, force_download, local_files_only)\u001b[0m\n\u001b[1;32m   1824\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1825\u001b[0m     \u001b[38;5;66;03m# Otherwise: most likely a connection issue or Hub downtime => let's warn the user\u001b[39;00m\n\u001b[0;32m-> 1826\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m LocalEntryNotFoundError(\n\u001b[1;32m   1827\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAn error happened while trying to locate the file on the Hub and we cannot find the requested files\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1828\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m in the local cache. Please check your connection and try again or make sure your Internet connection\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1829\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m is on.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1830\u001b[0m     ) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mhead_call_error\u001b[39;00m\n","\u001b[0;31mLocalEntryNotFoundError\u001b[0m: An error happened while trying to locate the file on the Hub and we cannot find the requested files in the local cache. Please check your connection and try again or make sure your Internet connection is on.","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","Cell \u001b[0;32mIn[13], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m MODEL \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcardiffnlp/twitter-roberta-base-sentiment\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m----> 2\u001b[0m tokenizer \u001b[38;5;241m=\u001b[39m \u001b[43mAutoTokenizer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfrom_pretrained\u001b[49m\u001b[43m(\u001b[49m\u001b[43mMODEL\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m model \u001b[38;5;241m=\u001b[39m AutoModelForSequenceClassification\u001b[38;5;241m.\u001b[39mfrom_pretrained(MODEL)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/models/auto/tokenization_auto.py:837\u001b[0m, in \u001b[0;36mAutoTokenizer.from_pretrained\u001b[0;34m(cls, pretrained_model_name_or_path, *inputs, **kwargs)\u001b[0m\n\u001b[1;32m    835\u001b[0m         config \u001b[38;5;241m=\u001b[39m AutoConfig\u001b[38;5;241m.\u001b[39mfor_model(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mconfig_dict)\n\u001b[1;32m    836\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 837\u001b[0m         config \u001b[38;5;241m=\u001b[39m \u001b[43mAutoConfig\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfrom_pretrained\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    838\u001b[0m \u001b[43m            \u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrust_remote_code\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrust_remote_code\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\n\u001b[1;32m    839\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    840\u001b[0m config_tokenizer_class \u001b[38;5;241m=\u001b[39m config\u001b[38;5;241m.\u001b[39mtokenizer_class\n\u001b[1;32m    841\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(config, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto_map\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAutoTokenizer\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config\u001b[38;5;241m.\u001b[39mauto_map:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/models/auto/configuration_auto.py:934\u001b[0m, in \u001b[0;36mAutoConfig.from_pretrained\u001b[0;34m(cls, pretrained_model_name_or_path, **kwargs)\u001b[0m\n\u001b[1;32m    931\u001b[0m trust_remote_code \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrust_remote_code\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m    932\u001b[0m code_revision \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcode_revision\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m--> 934\u001b[0m config_dict, unused_kwargs \u001b[38;5;241m=\u001b[39m \u001b[43mPretrainedConfig\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_config_dict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    935\u001b[0m has_remote_code \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto_map\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAutoConfig\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto_map\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m    936\u001b[0m has_local_code \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmodel_type\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict \u001b[38;5;129;01mand\u001b[39;00m config_dict[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmodel_type\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01min\u001b[39;00m CONFIG_MAPPING\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/configuration_utils.py:632\u001b[0m, in \u001b[0;36mPretrainedConfig.get_config_dict\u001b[0;34m(cls, pretrained_model_name_or_path, **kwargs)\u001b[0m\n\u001b[1;32m    630\u001b[0m original_kwargs \u001b[38;5;241m=\u001b[39m copy\u001b[38;5;241m.\u001b[39mdeepcopy(kwargs)\n\u001b[1;32m    631\u001b[0m \u001b[38;5;66;03m# Get config dict associated with the base config file\u001b[39;00m\n\u001b[0;32m--> 632\u001b[0m config_dict, kwargs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_config_dict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    633\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_commit_hash\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict:\n\u001b[1;32m    634\u001b[0m     original_kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_commit_hash\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m config_dict[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_commit_hash\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/configuration_utils.py:689\u001b[0m, in \u001b[0;36mPretrainedConfig._get_config_dict\u001b[0;34m(cls, pretrained_model_name_or_path, **kwargs)\u001b[0m\n\u001b[1;32m    685\u001b[0m configuration_file \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_configuration_file\u001b[39m\u001b[38;5;124m\"\u001b[39m, CONFIG_NAME) \u001b[38;5;28;01mif\u001b[39;00m gguf_file \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m gguf_file\n\u001b[1;32m    687\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    688\u001b[0m     \u001b[38;5;66;03m# Load from local folder or from cache or download from model Hub and cache\u001b[39;00m\n\u001b[0;32m--> 689\u001b[0m     resolved_config_file \u001b[38;5;241m=\u001b[39m \u001b[43mcached_file\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    690\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    691\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconfiguration_file\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    692\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcache_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcache_dir\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    693\u001b[0m \u001b[43m        \u001b[49m\u001b[43mforce_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    694\u001b[0m \u001b[43m        \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    695\u001b[0m \u001b[43m        \u001b[49m\u001b[43mresume_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresume_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    696\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlocal_files_only\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlocal_files_only\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    697\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtoken\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtoken\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    698\u001b[0m \u001b[43m        \u001b[49m\u001b[43muser_agent\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muser_agent\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    699\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrevision\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrevision\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    700\u001b[0m \u001b[43m        \u001b[49m\u001b[43msubfolder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msubfolder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    701\u001b[0m \u001b[43m        \u001b[49m\u001b[43m_commit_hash\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcommit_hash\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    702\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    703\u001b[0m     commit_hash \u001b[38;5;241m=\u001b[39m extract_commit_hash(resolved_config_file, commit_hash)\n\u001b[1;32m    704\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mEnvironmentError\u001b[39;00m:\n\u001b[1;32m    705\u001b[0m     \u001b[38;5;66;03m# Raise any environment error raise by `cached_file`. It will have a helpful error message adapted to\u001b[39;00m\n\u001b[1;32m    706\u001b[0m     \u001b[38;5;66;03m# the original exception.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/utils/hub.py:442\u001b[0m, in \u001b[0;36mcached_file\u001b[0;34m(path_or_repo_id, filename, cache_dir, force_download, resume_download, proxies, token, revision, local_files_only, subfolder, repo_type, user_agent, _raise_exceptions_for_gated_repo, _raise_exceptions_for_missing_entries, _raise_exceptions_for_connection_errors, _commit_hash, **deprecated_kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m    437\u001b[0m         resolved_file \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    438\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _raise_exceptions_for_missing_entries\n\u001b[1;32m    439\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _raise_exceptions_for_connection_errors\n\u001b[1;32m    440\u001b[0m     ):\n\u001b[1;32m    441\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m resolved_file\n\u001b[0;32m--> 442\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mEnvironmentError\u001b[39;00m(\n\u001b[1;32m    443\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWe couldn\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt connect to \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mHUGGINGFACE_CO_RESOLVE_ENDPOINT\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m to load this file, couldn\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt find it in the\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    444\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m cached files and it looks like \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath_or_repo_id\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is not the path to a directory containing a file named\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    445\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfull_filename\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mCheckout your internet connection or see how to run the library in offline mode at\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    446\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhttps://huggingface.co/docs/transformers/installation#offline-mode\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    447\u001b[0m     ) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n\u001b[1;32m    448\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m EntryNotFoundError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    449\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _raise_exceptions_for_missing_entries:\n","\u001b[0;31mOSError\u001b[0m: We couldn't connect to 'https://huggingface.co' to load this file, couldn't find it in the cached files and it looks like cardiffnlp/twitter-roberta-base-sentiment is not the path to a directory containing a file named config.json.\nCheckout your internet connection or see how to run the library in offline mode at 'https://huggingface.co/docs/transformers/installation#offline-mode'."],"ename":"OSError","evalue":"We couldn't connect to 'https://huggingface.co' to load this file, couldn't find it in the cached files and it looks like cardiffnlp/twitter-roberta-base-sentiment is not the path to a directory containing a file named config.json.\nCheckout your internet connection or see how to run the library in offline mode at 'https://huggingface.co/docs/transformers/installation#offline-mode'.","output_type":"error"}]},{"cell_type":"code","source":"encoded_text = tokenizer(example, return_tensors='pt')\noutput = model(**encoded_text)\nscores = output[0][0].detach().numpy()\nscores = softmax(scores)\nscores_dict = {\n    'roberta_neg' : scores[0],\n    'roberta_neu' : scores[1],\n    'roberta_pos' : scores[2]\n}\nprint(scores_dict)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.153795Z","iopub.status.idle":"2024-06-29T06:15:03.154239Z","shell.execute_reply.started":"2024-06-29T06:15:03.154028Z","shell.execute_reply":"2024-06-29T06:15:03.154045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def polarity_scores_roberta(example):\n    encoded_text = tokenizer(example, return_tensors='pt')\n    output = model(**encoded_text)\n    scores = output[0][0].detach().numpy()\n    scores = softmax(scores)\n    scores_dict = {\n        'roberta_neg' : scores[0],\n        'roberta_neu' : scores[1],\n        'roberta_pos' : scores[2]\n    }\n    return scores_dict","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.155606Z","iopub.status.idle":"2024-06-29T06:15:03.156038Z","shell.execute_reply.started":"2024-06-29T06:15:03.155842Z","shell.execute_reply":"2024-06-29T06:15:03.155858Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"res = {}\nfor i, row in tqdm(df.iterrows(), total=len(df)):\n    try:\n        text = row['Text']\n        myid = row['Id']\n        vader_result = sia.polarity_scores(text)\n        vader_result_rename = {}\n        for key, value in vader_result.items():\n            vader_result_rename[f\"vader_{key}\"] = value\n        roberta_result = polarity_scores_roberta(text)\n        both = {**vader_result_rename, **roberta_result}\n        res[myid] = both\n    except RuntimeError:\n        print(f'Broke for id {myid}')","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.158104Z","iopub.status.idle":"2024-06-29T06:15:03.158557Z","shell.execute_reply.started":"2024-06-29T06:15:03.158328Z","shell.execute_reply":"2024-06-29T06:15:03.158345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_df = pd.DataFrame(res).T\nresults_df = results_df.reset_index().rename(columns={'index': 'Id'})\nresults_df = results_df.merge(df, how='left')","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.159807Z","iopub.status.idle":"2024-06-29T06:15:03.160202Z","shell.execute_reply.started":"2024-06-29T06:15:03.160010Z","shell.execute_reply":"2024-06-29T06:15:03.160026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.161583Z","iopub.status.idle":"2024-06-29T06:15:03.161970Z","shell.execute_reply.started":"2024-06-29T06:15:03.161785Z","shell.execute_reply":"2024-06-29T06:15:03.161801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.pairplot(data=results_df,\n             vars=['vader_neg', 'vader_neu', 'vader_pos',\n                  'roberta_neg', 'roberta_neu', 'roberta_pos'],\n            hue='Score',\n            palette='tab10')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.163388Z","iopub.status.idle":"2024-06-29T06:15:03.163803Z","shell.execute_reply.started":"2024-06-29T06:15:03.163614Z","shell.execute_reply":"2024-06-29T06:15:03.163631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The Transformers Pipeline","metadata":{}},{"cell_type":"code","source":"from transformers import pipeline\n\nsent_pipeline = pipeline(\"sentiment-analysis\")","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.165104Z","iopub.status.idle":"2024-06-29T06:15:03.165488Z","shell.execute_reply.started":"2024-06-29T06:15:03.165301Z","shell.execute_reply":"2024-06-29T06:15:03.165317Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sent_pipeline('I love sentiment analysis!')","metadata":{"execution":{"iopub.status.busy":"2024-06-29T06:15:03.167212Z","iopub.status.idle":"2024-06-29T06:15:03.167800Z","shell.execute_reply.started":"2024-06-29T06:15:03.167501Z","shell.execute_reply":"2024-06-29T06:15:03.167542Z"},"trusted":true},"execution_count":null,"outputs":[]}]}